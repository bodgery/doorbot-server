* MMS -> DB robustness
** If a member exists in both places, but with different RFID keys, 
   the build_active_member_cache.py script will consider the member to not 
   be in the database. The add_members_to_db.py script will then try to add 
   the member, and fail due to duplicate MMS IDs. How to handle?
** Could catch DB error and ignore it
** Could check by MMS ID instead of RFID, and filter it into a list of members 
   with mismatched RFID

* Documentation
** README on developer setup
** Wiki page on broad overview of system
** Code docs
* API
** Gather liabilty form emails
** Mark liability form emails as set
** Alter tag API (not based on existing API)

# Later(tm)
* Tests with Pg should create a whole new database
* Jenkins runs the Pg tests
* Swagger doc
* Open a door API
* Link to MemberPress
* Ping status of doorbots
