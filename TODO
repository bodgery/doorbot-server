# Future Version
* Rebuild flask directory layout
* HTML Tests
* Oauth2 on API
* Page to change password for the logged in user
* Page to change password for any user
** Force them to change their password at next login
* Page for adding/removing access control on user
* Create users for each individual doorbot and tool scanner
* Log everything
** Who did it
** Who it was targetted at
** Change in password
** Scan at location
** Change in access level
* Entry log paginates using a GraphQL-style cursor
* Entry log dates in local time
* CSS theming


# MMS -> DB robustness
* If a member exists in both places, but with different RFID keys, 
   the build_active_member_cache.py script will consider the member to not 
   be in the database. The add_members_to_db.py script will then try to add 
   the member, and fail due to duplicate MMS IDs. How to handle?
* Could catch DB error and ignore it
* Could check by MMS ID instead of RFID, and filter it into a list of members 
   with mismatched RFID

# Documentation
* Wiki page on broad overview of system
* Code docs

# Later(tm)
* Tests with Pg should create a whole new database
* Jenkins runs the Pg tests
* Swagger doc
* Open a door API
* Link to MemberPress
* Ping status of doorbots
